{"version":3,"sources":["file:///Users/yamiwang/SY/assets/scripts/base/UIMgr.ts"],"names":["LayerKeyPair","SceneConfig","UIMgr","instantiate","ResMgr","constructor","_key","_value","key","value","_type","_bundleName","_folder","type","bundleName","resFolder","LayerType","SceneType","mLayerRoot","mWindowRoot","mLayerList","mWindowList","mCurrentScene","mSceneConfig","GetInstance","instance","Init","cc","find","Array","None","loadingConfig","Loading","ShowLayer","_prefabPath","targetNode","FindLayer","nodeCount","GetRootNode","childrenCount","setSiblingIndex","active","CreatePrefab","_tempNode","addChild","RecordLayer","_loadFinish","GetAssetInBundle","Prefab","_prefab","tempNode","ChangeScene","_sceneType","DeleteAllLayer","targetList","GetList","i","length","destroy","splice","Layer","Window","index","findIndex","target","console","log","_node","keyPair","push"],"mappings":"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","sourcesContent":["\nimport { AssetManager, assetManager, Component, find, instantiate } from \"cc\";\nimport { BaseUI } from \"./BaseUI\";\nimport { ResMgr } from \"./ResMgr\";\n\nclass LayerKeyPair\n{\n    constructor(_key :string  , _value : cc.Node) \n    {\n        this.key = _key;\n        this.value = _value;\n    }\n    key : string ;\n    value : cc.Node;\n}\n\nclass SceneConfig\n{\n    constructor(_type :SceneType  , _bundleName : string , _folder : Array<string>) \n    {\n        this.type = _type;\n        this.bundleName = _bundleName;\n        this.resFolder = _folder;\n    }\n    type : SceneType;\n    bundleName : string;\n    resFolder : Array<string>;\n}\n\nexport enum LayerType\n{\n    Layer,\n    Window,\n}\n\nexport enum SceneType\n{\n    None,\n    Loading,\n    Login,\n    Hall,\n}\n\nexport class UIMgr \n{\n    private static instance : UIMgr = null;\n    public static GetInstance() :UIMgr\n    {\n        if(UIMgr.instance == null)\n        {\n            UIMgr.instance = new UIMgr();\n        }\n        return UIMgr.instance;\n    }\n\n    mLayerRoot : cc.Node = null;\n    mWindowRoot : cc.Node = null;\n    mLayerList : Array<LayerKeyPair>;\n    mWindowList  : Array<LayerKeyPair>;\n    mCurrentScene : SceneType;\n    mSceneConfig : Array<SceneConfig>;;\n    public Init()\n    {\n        this.mLayerRoot = cc.find(\"Canvas/LayerRoot\");\n        this.mWindowRoot = cc.find(\"Canvas/WindowRoot\");\n        this.mLayerList = new Array<LayerKeyPair>();\n        this.mWindowList = new Array<LayerKeyPair>();\n        this.mCurrentScene = SceneType.None;\n   \n        let resFolder:Array<string> = [\"1\",\"2\"];\n        let loadingConfig = new SceneConfig(SceneType.Loading,\"loading\",resFolder);\n        \n\n    }\n\n    public ShowLayer(_bundleName :string , _prefabPath:string , _type : LayerType) : cc.Node\n    {\n        let key = _bundleName + _prefabPath;\n        let targetNode = this.FindLayer(key,_type);\n        \n        if(targetNode != null)\n        {\n            let nodeCount = this.GetRootNode(_type).childrenCount;\n            targetNode.setSiblingIndex(nodeCount);\n            targetNode.active = true;\n            return targetNode;\n        }\n\n        this.CreatePrefab(_bundleName,_prefabPath , (_tempNode)=>\n        {\n            this.GetRootNode(_type).addChild(_tempNode);\n            this.RecordLayer(key , _tempNode , _type);\n            return _tempNode;\n        });\n    }\n\n\n    public CreatePrefab(_bundleName :string , _prefabPath:string, _loadFinish:Function)\n    {\n        ResMgr.GetAssetInBundle(_bundleName , _prefabPath , cc.Prefab , (_prefab)=>\n        {\n            if(_loadFinish)\n            {\n                let tempNode =  instantiate(_prefab);\n                _loadFinish(tempNode);\n            }\n        });\n    }\n\n    public ChangeScene(_sceneType :SceneType)\n    {\n\n    }\n\n\n    private DeleteAllLayer(_type :LayerType)\n    {\n        let targetList = this.GetList(_type);\n        for(let i = 0 ; i < targetList.length ; i++)\n        {\n            targetList[i].value.destroy();\n        }\n        targetList.splice(0 , targetList.length - 1);\n    }\n\n\n    private GetList(_type :LayerType) : Array<LayerKeyPair>\n    {\n        let targetList;\n        switch(_type)\n        {\n            case LayerType.Layer:\n                targetList = this.mLayerList;\n            break;\n            case LayerType.Window:\n                targetList = this.mWindowList;\n            break;\n        }\n        return targetList;\n    }\n\n    private FindLayer(_key : string , _type :LayerType) : cc.Node\n    {\n        let targetList = this.GetList(_type);\n        let index = targetList.findIndex((target) => target.key === _key);\n        if(index >= 0)\n        {\n            return targetList[index].value;\n        }\n        console.log(\"FindNode  没有找到该layer   key ===\" +_key );\n        return null;\n    }\n\n    private GetRootNode( _type :LayerType) : cc.Node\n    {\n        let target;\n        switch(_type)\n        {\n            case LayerType.Layer:\n                target = this.mLayerRoot;\n            break;\n            case LayerType.Window:\n                target = this.mWindowRoot;\n            break;\n        }\n        return target;\n    }\n\n    private RecordLayer(_key : string , _node : cc.Node , _type : LayerType)\n    {\n        let keyPair = new LayerKeyPair(_key , _node);\n        this.GetList(_type).push(keyPair);\n    }\n\n}\n\n"]}