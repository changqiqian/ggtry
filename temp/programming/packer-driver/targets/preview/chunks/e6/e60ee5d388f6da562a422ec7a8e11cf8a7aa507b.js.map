{"version":3,"sources":["file:///Users/yamiwang/cowboy/assets/scripts/base/UIMgr.ts"],"names":["LayerKeyPair","SceneConfig","UIMgr","instantiate","ResMgr","constructor","_key","_value","_belong","key","value","belong","_type","_prefabPath","_bundles","_folders","type","bundleNames","resFolders","prefabPath","LayerType","SceneType","mLayerRoot","mWindowRoot","mLayerList","mWindowList","mCurrentScene","mSceneConfig","GetInstance","instance","Init","_loadFinish","cc","find","Array","None","resFolder","loadingConfig","Loading","loginConfig","Login","hallConfig","Hall","push","PreloadRes","ShowLayer","_bundleName","targetNode","FindLayer","nodeCount","GetRootNode","childrenCount","setSiblingIndex","active","CreatePrefab","_tempNode","addChild","RecordLayer","GetAssetInBundle","Prefab","_prefab","tempNode","ChangeScene","_sceneType","console","log","configDeleteScene","GetSceneConfig","DeleteScene","i","length","ReleaseBundle","configNewScene","Layer","_bundleNames","_resFolders","loadCount","PreloadBundle","_bundle","PreloadAssetsInBundle","index","findIndex","_item","_SceneType","DeleteLayer","Window","targetList","GetList","step","destroy","splice","DeleteAllLayer","target","_node","keyPair"],"mappings":"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","sourcesContent":["\nimport { AssetManager, assetManager, Component, find, instantiate } from \"cc\";\nimport { ResMgr } from \"./ResMgr\";\n\nclass LayerKeyPair\n{\n    constructor(_key :string  , _value : cc.Node , _belong :SceneType) \n    {\n        this.key = _key;\n        this.value = _value;\n        this.belong = _belong;\n    }\n    key : string ;\n    value : cc.Node;\n    belong : SceneType;\n}\n\nclass SceneConfig\n{\n    constructor(_type :SceneType ,_prefabPath : string , _bundles : Array<string> , _folders : Array<string>) \n    {\n        this.type = _type;\n        this.bundleNames = _bundles;\n        this.resFolders = _folders;\n        this.prefabPath = _prefabPath;\n    }\n    type : SceneType;\n    bundleNames : Array<string>;\n    resFolders : Array<string>;\n    \n    prefabPath : string;\n}\n\nexport enum LayerType\n{\n    Layer,\n    Window,\n}\n\nexport enum SceneType\n{\n    None,\n    Loading,\n    Login,\n    Hall,\n}\n\nexport class UIMgr \n{\n    private static instance : UIMgr = null;\n    public static GetInstance() :UIMgr\n    {\n        if(UIMgr.instance == null)\n        {\n            UIMgr.instance = new UIMgr();\n        }\n        return UIMgr.instance;\n    }\n\n    mLayerRoot : cc.Node = null;\n    mWindowRoot : cc.Node = null;\n    mLayerList : Array<LayerKeyPair>;\n    mWindowList  : Array<LayerKeyPair>;\n    mCurrentScene : SceneType;\n    mSceneConfig : Array<SceneConfig>;\n    public Init(_loadFinish : Function)\n    {\n        this.mLayerRoot = cc.find(\"Canvas/LayerRoot\");\n        this.mWindowRoot = cc.find(\"Canvas/WindowRoot\");\n        this.mLayerList = new Array<LayerKeyPair>();\n        this.mWindowList = new Array<LayerKeyPair>();\n        this.mCurrentScene = SceneType.None;\n        this.mSceneConfig = new Array<SceneConfig>();\n\n        //场景配置\n        let resFolder:Array<string> = [\"anm\",\"font\",\"music\",\"prefab\",\"texture\"];\n        let loadingConfig = new SceneConfig(SceneType.Loading , \"prefab/LoadingUI\" ,[\"loading\"],resFolder);\n        let loginConfig = new SceneConfig(SceneType.Login, \"prefab/LoginUI\" ,[\"login\"],resFolder);\n        let hallConfig = new SceneConfig(SceneType.Hall, \"prefab/HallUI\",[\"hall\",\"cowboy\"],resFolder);\n        this.mSceneConfig.push(loadingConfig);\n        this.mSceneConfig.push(loginConfig);\n        this.mSceneConfig.push(hallConfig);\n        \n        //公用资源加载\n        \n        this.PreloadRes([\"common\"], resFolder , ()=>\n        {\n            _loadFinish();\n        });\n    }\n\n    public ShowLayer(_bundleName :string , _prefabPath:string , _type : LayerType) : cc.Node\n    {\n        let key = _bundleName + \"/\"  + _prefabPath;\n        let targetNode = this.FindLayer(key,_type);\n        \n        if(targetNode != null)\n        {\n            let nodeCount = this.GetRootNode(_type).childrenCount;\n            targetNode.setSiblingIndex(nodeCount);\n            targetNode.active = true;\n            return targetNode;\n        }\n\n        this.CreatePrefab(_bundleName,_prefabPath , (_tempNode)=>\n        {\n            this.GetRootNode(_type).addChild(_tempNode);\n            this.RecordLayer(key , _tempNode , _type);\n            return _tempNode;\n        });\n    }\n\n\n    public CreatePrefab(_bundleName :string , _prefabPath:string, _loadFinish:Function)\n    {\n        ResMgr.GetAssetInBundle(_bundleName , _prefabPath , cc.Prefab , (_prefab)=>\n        {\n            if(_loadFinish)\n            {\n                let tempNode =  instantiate(_prefab);\n                _loadFinish(tempNode);\n            }\n        });\n    }\n\n\n    public ChangeScene(_sceneType :SceneType)\n    {\n        if(_sceneType == SceneType.None)\n        {\n            console.log(\"不能跳转目标场景====SceneType.None\");\n            return;\n        }\n\n        if(this.mCurrentScene != SceneType.None)\n        {\n            let configDeleteScene = this.GetSceneConfig(this.mCurrentScene);\n            this.DeleteScene( this.mCurrentScene);\n            for(let i = 0 ; i < configDeleteScene.bundleNames.length ; i++)\n            {\n                ResMgr.ReleaseBundle(configDeleteScene.bundleNames[i]);\n            }\n        }\n\n        this.mCurrentScene = _sceneType;\n        let configNewScene = this.GetSceneConfig(_sceneType);\n        this.PreloadRes(configNewScene.bundleNames , configNewScene.resFolders , ()=>\n        {\n            this.ShowLayer(configNewScene.bundleNames[0],configNewScene.prefabPath, LayerType.Layer);\n        });\n    }\n\n    public PreloadRes(_bundleNames : Array<string> , _resFolders : Array<string> , _loadFinish : Function)\n    {\n        let loadCount = _bundleNames.length * _resFolders.length;\n        //console.log(\"total loadCount === \" +loadCount);\n        for(let i = 0 ; i < _bundleNames.length ; i++)\n        {\n            ResMgr.PreloadBundle(_bundleNames[i] , (_bundle)=>\n            {\n                ResMgr.PreloadAssetsInBundle(_bundle , _resFolders , ()=>\n                {\n                    loadCount--;\n                    //console.log(\"rest loadCount === \" +loadCount);\n                    if(loadCount == 0)\n                    {\n                        if(_loadFinish)\n                        {\n                            _loadFinish();\n                        }\n                    }\n                });\n            });\n        }\n    }\n\n    private GetSceneConfig(_sceneType :SceneType) : SceneConfig\n    {\n        let index = this.mSceneConfig.findIndex((_item) => _item.type === _sceneType);\n        if(index < 0)\n        {\n            console.log(\"GetSceneConfig 没有找到该场景 _sceneType ===\" +_sceneType);\n            return null;\n        }\n\n        return this.mSceneConfig[index];\n    }\n\n    private DeleteScene(_SceneType : SceneType)\n    {\n        this.DeleteLayer(LayerType.Layer,_SceneType);\n        this.DeleteLayer(LayerType.Window,_SceneType);\n    }\n\n\n    private DeleteLayer(_type :LayerType , _belong : SceneType)\n    {\n        let targetList = this.GetList(_type);\n        let step = 0;\n        while(step < targetList.length)\n        {\n            if(targetList[step].belong == _belong)\n            {\n                console.log(\"删除targetList[step]===\" + targetList[step].key)\n                targetList[step].value.destroy();\n                targetList.splice(step , 1);\n            }\n            else\n            {\n                step++;\n            }\n        }\n    }\n\n    private DeleteAllLayer(_type :LayerType)\n    {\n        let targetList = this.GetList(_type);\n        for(let i = 0 ; i < targetList.length ; i++)\n        {\n            targetList[i].value.destroy();\n        }\n        targetList.splice(0 , targetList.length - 1);\n    }\n\n\n    private GetList(_type :LayerType) : Array<LayerKeyPair>\n    {\n        switch(_type)\n        {\n            case LayerType.Layer:\n                return this.mLayerList;\n            case LayerType.Window:\n                return this.mWindowList;\n        }\n    }\n\n    private FindLayer(_key : string , _type :LayerType) : cc.Node\n    {\n        let targetList = this.GetList(_type);\n        let index = targetList.findIndex((_item) => _item.key === _key);\n        if(index >= 0)\n        {\n            return targetList[index].value;\n        }\n        return null;\n    }\n\n    private GetRootNode( _type :LayerType) : cc.Node\n    {\n        let target;\n        switch(_type)\n        {\n            case LayerType.Layer:\n                target = this.mLayerRoot;\n            break;\n            case LayerType.Window:\n                target = this.mWindowRoot;\n            break;\n        }\n        return target;\n    }\n\n    private RecordLayer(_key : string , _node : cc.Node , _type : LayerType)\n    {\n        let keyPair = new LayerKeyPair(_key , _node , this.mCurrentScene);\n        this.GetList(_type).push(keyPair);\n    }\n\n}\n\n"]}