{"version":3,"sources":["file:///Users/yamiwang/SY/assets/scripts/base/UIMgr.ts"],"names":["LayerKeyPair","SceneConfig","UIMgr","instantiate","ResMgr","constructor","_key","_value","key","value","_type","_prefabPath","_bundles","_folders","type","bundleNames","resFolders","prefabPath","LayerType","SceneType","mLayerRoot","mWindowRoot","mLayerList","mWindowList","mCurrentScene","mSceneConfig","GetInstance","instance","Init","cc","find","Array","None","resFolder","loadingConfig","Loading","loginConfig","Login","hallConfig","Hall","push","ShowLayer","_bundleName","targetNode","FindLayer","nodeCount","GetRootNode","childrenCount","setSiblingIndex","active","CreatePrefab","_tempNode","addChild","RecordLayer","_loadFinish","GetAssetInBundle","Prefab","_prefab","tempNode","ChangeScene","_sceneType","config","GetSceneConfig","i","length","ReleaseBundle","PreloadSceneRes","console","log","_config","loadCount","PreloadBundle","_bundle","PreloadAssetsInBundle","index","findIndex","target","DeleteAllLayer","targetList","GetList","destroy","splice","Layer","Window","_node","keyPair"],"mappings":"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","sourcesContent":["\nimport { AssetManager, assetManager, Component, find, instantiate } from \"cc\";\nimport { BaseUI } from \"./BaseUI\";\nimport { ResMgr } from \"./ResMgr\";\n\nclass LayerKeyPair\n{\n    constructor(_key :string  , _value : cc.Node) \n    {\n        this.key = _key;\n        this.value = _value;\n    }\n    key : string ;\n    value : cc.Node;\n}\n\nclass SceneConfig\n{\n    constructor(_type :SceneType ,_prefabPath : string , _bundles : Array<string> , _folders : Array<string>) \n    {\n        this.type = _type;\n        this.bundleNames = _bundles;\n        this.resFolders = _folders;\n        this.prefabPath = _prefabPath;\n    }\n    type : SceneType;\n    bundleNames : Array<string>;\n    resFolders : Array<string>;\n    prefabPath : string;\n}\n\nexport enum LayerType\n{\n    Layer,\n    Window,\n}\n\nexport enum SceneType\n{\n    None,\n    Loading,\n    Login,\n    Hall,\n}\n\nexport class UIMgr \n{\n    private static instance : UIMgr = null;\n    public static GetInstance() :UIMgr\n    {\n        if(UIMgr.instance == null)\n        {\n            UIMgr.instance = new UIMgr();\n        }\n        return UIMgr.instance;\n    }\n\n    mLayerRoot : cc.Node = null;\n    mWindowRoot : cc.Node = null;\n    mLayerList : Array<LayerKeyPair>;\n    mWindowList  : Array<LayerKeyPair>;\n    mCurrentScene : SceneType;\n    mSceneConfig : Array<SceneConfig>;\n    public Init()\n    {\n        this.mLayerRoot = cc.find(\"Canvas/LayerRoot\");\n        this.mWindowRoot = cc.find(\"Canvas/WindowRoot\");\n        this.mLayerList = new Array<LayerKeyPair>();\n        this.mWindowList = new Array<LayerKeyPair>();\n        this.mCurrentScene = SceneType.None;\n        this.mSceneConfig = new Array<SceneConfig>();\n\n        //场景配置\n        let resFolder:Array<string> = [\"anm\",\"font\",\"music\",\"prefab\",\"texture\"];\n        let loadingConfig = new SceneConfig(SceneType.Loading , \"prefab/loading\" ,[\"loading\"],resFolder);\n        let loginConfig = new SceneConfig(SceneType.Login, \"prefab/login\" ,[\"login\"],resFolder);\n        let hallConfig = new SceneConfig(SceneType.Hall, \"prefab/hall\",[\"hall\"],resFolder);\n        this.mSceneConfig.push(loadingConfig);\n        this.mSceneConfig.push(loginConfig);\n        this.mSceneConfig.push(hallConfig);\n        \n        //公用资源加载\n    }\n\n    public ShowLayer(_bundleName :string , _prefabPath:string , _type : LayerType) : cc.Node\n    {\n        let key = _bundleName + _prefabPath;\n        let targetNode = this.FindLayer(key,_type);\n        \n        if(targetNode != null)\n        {\n            let nodeCount = this.GetRootNode(_type).childrenCount;\n            targetNode.setSiblingIndex(nodeCount);\n            targetNode.active = true;\n            return targetNode;\n        }\n\n        this.CreatePrefab(_bundleName,_prefabPath , (_tempNode)=>\n        {\n            this.GetRootNode(_type).addChild(_tempNode);\n            this.RecordLayer(key , _tempNode , _type);\n            return _tempNode;\n        });\n    }\n\n\n    public CreatePrefab(_bundleName :string , _prefabPath:string, _loadFinish:Function)\n    {\n        ResMgr.GetAssetInBundle(_bundleName , _prefabPath , cc.Prefab , (_prefab)=>\n        {\n            if(_loadFinish)\n            {\n                let tempNode =  instantiate(_prefab);\n                _loadFinish(tempNode);\n            }\n        });\n    }\n\n    public ChangeScene(_sceneType :SceneType)\n    {\n        let config = this.GetSceneConfig(_sceneType);\n        if(this.mCurrentScene != SceneType.None)\n        {\n            for(let i = 0 ; i < config.bundleNames.length ; i++)\n            {\n                ResMgr.ReleaseBundle(config.bundleNames[i]);\n            }\n        }\n\n        this.PreloadSceneRes(config , ()=>\n        {\n            console.log(\"PreloadSceneRes loadFinish === \");\n        });\n    }\n\n    public PreloadSceneRes(_config : SceneConfig , _loadFinish : Function)\n    {\n        let loadCount = _config.bundleNames.length * _config.resFolders.length;\n        console.log(\"total loadCount === \" +loadCount);\n        for(let i = 0 ; i < _config.bundleNames.length ; i++)\n        {\n            ResMgr.PreloadBundle(_config.bundleNames[i] , (_bundle)=>\n            {\n                ResMgr.PreloadAssetsInBundle(_bundle , _config.resFolders , ()=>\n                {\n                    loadCount--;\n                    console.log(\"rest loadCount === \" +loadCount);\n                    if(loadCount == 0)\n                    {\n                        if(_loadFinish)\n                        {\n                            _loadFinish();\n                        }\n                    }\n                });\n            });\n        }\n    }\n\n    \n\n    private GetSceneConfig(_sceneType :SceneType) : SceneConfig\n    {\n        let index = this.mSceneConfig.findIndex((target) => target.type === _sceneType);\n        if(index < 0)\n        {\n            console.log(\"GetSceneConfig 没有找到该场景 _sceneType ===\" +_sceneType);\n            return null;\n        }\n\n        return this.mSceneConfig[index];\n    }\n\n\n    private DeleteAllLayer(_type :LayerType)\n    {\n        let targetList = this.GetList(_type);\n        for(let i = 0 ; i < targetList.length ; i++)\n        {\n            targetList[i].value.destroy();\n        }\n        targetList.splice(0 , targetList.length - 1);\n    }\n\n\n    private GetList(_type :LayerType) : Array<LayerKeyPair>\n    {\n        let targetList;\n        switch(_type)\n        {\n            case LayerType.Layer:\n                targetList = this.mLayerList;\n            break;\n            case LayerType.Window:\n                targetList = this.mWindowList;\n            break;\n        }\n        return targetList;\n    }\n\n    private FindLayer(_key : string , _type :LayerType) : cc.Node\n    {\n        let targetList = this.GetList(_type);\n        let index = targetList.findIndex((target) => target.key === _key);\n        if(index >= 0)\n        {\n            return targetList[index].value;\n        }\n        console.log(\"FindNode  没有找到该layer   key ===\" +_key );\n        return null;\n    }\n\n    private GetRootNode( _type :LayerType) : cc.Node\n    {\n        let target;\n        switch(_type)\n        {\n            case LayerType.Layer:\n                target = this.mLayerRoot;\n            break;\n            case LayerType.Window:\n                target = this.mWindowRoot;\n            break;\n        }\n        return target;\n    }\n\n    private RecordLayer(_key : string , _node : cc.Node , _type : LayerType)\n    {\n        let keyPair = new LayerKeyPair(_key , _node);\n        this.GetList(_type).push(keyPair);\n    }\n\n}\n\n"]}