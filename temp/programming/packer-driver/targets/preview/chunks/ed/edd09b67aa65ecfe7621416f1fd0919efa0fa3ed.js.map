{"version":3,"sources":["file:///Users/yamiwang/cowboy/assets/scripts/base/Calculator.ts"],"names":["CardStruct","Calculator","constructor","_num","_type","mType","mNum","CardType","Combiantion","GetInstance","instance","mCurrentCombination","None","mCurrentCombineList","mCurrentFindFunctions","Array","push","High","OnePair","TwoPair","ThreeOfKind","Straight","Flush","FullHouse","StraightFlush","RoyalStraightFlush","FindHighCard","bind","FindOnePair","FindTwoPair","FindThreeOfKind","FindStraight","FindFlush","FindFullHouse","FindFourOfKind","FindStraightFlush","FindRoyalStraightFlush","TryToCalculate","_publicCards","_playerCards","tempPublicCards","DeepCopyCards","tempPlayerCards","totalCardList","concat","SortCardList","result","CalculateCombination","console","log","toString","LogCards","_targetCards","length","i","count","FindBiggestCards","pairResult","FindSameNumCards","pairCount","restCards","RemoveCards","highCards","shift","tribleResult","smallAceStraight","FindA2345","normalStraights","FindNormalStraight","Diamond","Speades","currentFlush","FindSameTypeCards","fourResult","flush","straightFlush","typeStr","Club","Heart","_targetList","sort","A","B","tempList","JSON","parse","stringify","_findCount","copyList","_sameCount","tempResult","FindTargetNumList","_targetNum","temp","FindTargetNumCard","IsSameCards","card0","card1","_removeList","step","currentCard","found","splice","ace","card2","card3","card4","card5","condition","currentStepCard","lastStepCard","current"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node } from 'cc';\n\n\n\n\nexport class CardStruct\n{\n    constructor(_num : number , _type : CardType)\n    {\n        this.mNum = _num;\n        this.mType = _type;\n    }\n    public mType : CardType;\n    public mNum : number;\n}\n\nexport enum CardType\n{\n    None,\n    Diamond,\n    Club,\n    Heart,\n    Speades\n}\n\nexport enum Combiantion\n{\n    None,\n    High,\n    OnePair,\n    TwoPair,\n    ThreeOfKind,\n    Straight,\n    Flush,\n    FullHouse,\n    FourOfKind,\n    StraightFlush,\n    RoyalStraightFlush,\n}\n\nexport class Calculator{\n    private static instance : Calculator = null;\n    public static GetInstance() :Calculator\n    {\n        if(Calculator.instance == null)\n        {\n            Calculator.instance = new Calculator();\n        }\n        return Calculator.instance;\n    }\n\n    constructor()\n    {\n        this.mCurrentCombineList = new Array<Combiantion>();\n        this.mCurrentCombineList.push(Combiantion.None);\n        this.mCurrentCombineList.push(Combiantion.High);\n        this.mCurrentCombineList.push(Combiantion.OnePair);\n        this.mCurrentCombineList.push(Combiantion.TwoPair);\n        this.mCurrentCombineList.push(Combiantion.ThreeOfKind);\n        this.mCurrentCombineList.push(Combiantion.Straight);\n        this.mCurrentCombineList.push(Combiantion.Flush);\n        this.mCurrentCombineList.push(Combiantion.FullHouse);\n        this.mCurrentCombineList.push(Combiantion.StraightFlush);\n        this.mCurrentCombineList.push(Combiantion.RoyalStraightFlush);\n\n        this.mCurrentFindFunctions = new Array<Function>();\n        this.mCurrentFindFunctions.push(null);\n        this.mCurrentFindFunctions.push(this.FindHighCard.bind(this));\n        this.mCurrentFindFunctions.push(this.FindOnePair.bind(this));\n        this.mCurrentFindFunctions.push(this.FindTwoPair.bind(this));\n        this.mCurrentFindFunctions.push(this.FindThreeOfKind.bind(this));\n        this.mCurrentFindFunctions.push(this.FindStraight.bind(this));\n        this.mCurrentFindFunctions.push(this.FindFlush.bind(this));\n        this.mCurrentFindFunctions.push(this.FindFullHouse.bind(this));\n        this.mCurrentFindFunctions.push(this.FindFourOfKind.bind(this));\n        this.mCurrentFindFunctions.push(this.FindStraightFlush.bind(this));\n        this.mCurrentFindFunctions.push(this.FindRoyalStraightFlush.bind(this));\n    }\n\n    mCurrentCombination : Combiantion = Combiantion.None;\n    mCurrentCombineList : Array<Combiantion>;\n    mCurrentFindFunctions : Array<Function>;\n\n    public TryToCalculate( _publicCards:Array<CardStruct> , _playerCards:Array<CardStruct> ) : Array<CardStruct>\n    {\n        let tempPublicCards = this.DeepCopyCards(_publicCards);\n        let tempPlayerCards = this.DeepCopyCards(_playerCards);\n        let totalCardList = tempPublicCards.concat(tempPlayerCards);\n        totalCardList = this.SortCardList(totalCardList);\n        let result = this.CalculateCombination(totalCardList);\n\n        console.log(\"this.mCurrentCombination===\" + this.mCurrentCombination.toString());\n        this.LogCards(result);\n        return result;\n    }\n\n    public CalculateCombination(_targetCards : Array<CardStruct>)\n    {\n        if (_targetCards.length < 5)\n        {\n            this.mCurrentCombination = Combiantion.None;\n            return null;\n        }\n\n        for (let i = this.mCurrentCombineList.length; i >= 1; i--)\n        {\n            let result = this.mCurrentFindFunctions[i](_targetCards);\n            if (result != null)\n            {\n                this.mCurrentCombination = this.mCurrentCombineList[i];\n                return result;\n            }\n        }\n        \n        this.mCurrentCombination = Combiantion.None;\n        return null;\n    }\n\n    public FindHighCard(_targetCards : Array<CardStruct>) : Array<CardStruct>\n    {\n        let count = 5;\n        if (_targetCards.length < 5)\n        {\n            return null;\n        }\n        let result = this.FindBiggestCards(_targetCards,count);\n        return result;\n    }\n\n    public FindOnePair(_targetCards : Array<CardStruct>): Array<CardStruct>\n    {\n        let pairResult = this.FindSameNumCards(_targetCards , 2);\n        let pairCount = 1;\n        if (pairResult.length != pairCount)\n        {\n            return null;\n        }\n\n        let restCards = this.RemoveCards(_targetCards, pairResult[0]);\n        let highCards = this.FindBiggestCards(restCards,3);\n        let result = pairResult[0].concat(highCards);\n        return result;\n    }\n\n    public FindTwoPair(_targetCards : Array<CardStruct>): Array<CardStruct>\n    {\n        let pairResult = this.FindSameNumCards(_targetCards , 2);\n        let pairCount = 2;\n        if (pairResult.length < pairCount)\n        {\n            return null;\n        }\n        while (pairResult.length > pairCount)\n        {\n            pairResult.shift();\n        }\n\n        let result = new Array<CardStruct>();\n        let restCards = _targetCards;\n        for (let i = 0; i < pairResult.length; i++)\n        {\n            result = result.concat(pairResult[i]);\n            restCards = this.RemoveCards(restCards, pairResult[i]);\n        }\n        \n        let highCards = this.FindBiggestCards(restCards,1);\n        result = result.concat(highCards);\n        return result;\n    }\n\n    public FindThreeOfKind(_targetCards : Array<CardStruct>): Array<CardStruct>\n    {\n        let tribleResult = this.FindSameNumCards(_targetCards,3);\n        if (tribleResult.length == 0)\n        {\n            return null;\n        }\n        \n        while (tribleResult.length > 1)\n        {\n            tribleResult.shift();\n        }\n        \n        let restCards = this.RemoveCards(_targetCards, tribleResult[0]);\n        let highCards = this.FindBiggestCards(restCards,2);\n        let result  = tribleResult[0].concat(highCards);\n        return result;\n    }\n\n    public FindStraight(_targetCards : Array<CardStruct>): Array<CardStruct>\n    {\n        let smallAceStraight = this.FindA2345(_targetCards);\n        let normalStraights = this.FindNormalStraight(_targetCards);\n        \n        if (normalStraights.length == 0 && smallAceStraight == null)\n        {\n            return null;\n        }\n        \n        if (normalStraights.length == 0)\n        {\n            return smallAceStraight;\n        }\n        else\n        {\n            return normalStraights[normalStraights.length - 1];\n        }\n    }\n\n    public FindFlush(_targetCards : Array<CardStruct>): Array<CardStruct>\n    {\n        for (let i = CardType.Diamond; i <= CardType.Speades; i++)\n        {\n            let currentFlush = this.FindSameTypeCards(_targetCards , i);\n            if (currentFlush.length < 5)\n            {\n                continue;\n            }\n\n            while (currentFlush.length > 5)\n            {\n                currentFlush.shift();\n            }\n\n            return currentFlush;\n        }\n\n        return null;\n    }\n\n    public FindFullHouse(_targetCards : Array<CardStruct>): Array<CardStruct>\n    {\n        let tribleResult = this.FindSameNumCards(_targetCards,3);\n        if (tribleResult.length == 0)\n        {\n            return null;\n        }\n        while (tribleResult.length > 1)\n        {\n            tribleResult.shift();\n        }\n        let restCards = this.RemoveCards(_targetCards, tribleResult[0]);\n        let pairResult = this.FindSameNumCards(restCards,2);\n        if (pairResult.length == 0)\n        {\n            return null;\n        }\n        while (pairResult.length > 1)\n        {\n            pairResult.shift();\n        }\n        let result = tribleResult[0].concat(pairResult[0]);\n        return result;\n    }\n        \n    public FindFourOfKind(_targetCards : Array<CardStruct>): Array<CardStruct>\n    {\n        let fourResult = this.FindSameNumCards(_targetCards,4);\n        if (fourResult.length == 0)\n        {\n            return null;\n        }\n        let restCards = this.RemoveCards(_targetCards, fourResult[0]);\n        let highCards = this.FindBiggestCards(restCards,1);\n        let result = fourResult[0].concat(highCards);\n        return result;\n    }\n\n    public FindStraightFlush(_targetCards : Array<CardStruct>): Array<CardStruct>\n    {\n        let flush = null;\n        for (let i = CardType.Diamond; i <= CardType.Speades; i++)\n        {\n            let currentFlush = this.FindSameTypeCards(_targetCards , i);\n            if (currentFlush.length < 5)\n            {\n                continue;\n            }\n\n            flush = currentFlush;\n            break;\n        }\n\n        if (flush == null)\n        {\n            return null;\n        }\n\n        let straightFlush = this.FindStraight(flush);\n        return straightFlush;\n    }\n\n    public FindRoyalStraightFlush(_targetCards : Array<CardStruct>): Array<CardStruct>\n    {\n        let result = this.FindStraightFlush(_targetCards);\n        if (result == null)\n        {\n            return null;\n        }\n\n        if (result[result.length - 1].mNum != 14)\n        {\n            return null;\n        }\n        return result;\n    }\n\n\n    public LogCards(_targetCards : Array<CardStruct>)\n    {\n\n        if(_targetCards == null)\n        {\n            console.log(\"当前牌组====null\");\n            return;\n        }\n\n        console.log(\"当前牌组====\");\n\n        for(let i = 0 ; i < _targetCards.length ; i++)\n        {\n            let typeStr = \"\";\n            switch(_targetCards[i].mType)\n            {\n                case CardType.Club:\n                    typeStr = \"♣️\";\n                break;\n                case CardType.Diamond:\n                    typeStr = \"♦️\";\n                break;\n                case CardType.Speades:\n                    typeStr = \"♠️\";\n                break;\n                case CardType.Heart:\n                    typeStr = \"♥️\";\n                break;\n            }\n            console.log(\"==== \"+ _targetCards[i].mNum + typeStr);\n        }\n    }\n\n    private SortCardList(_targetList : Array<CardStruct>)  :  Array<CardStruct>\n    {\n        _targetList.sort(function (A, B) {\n            return A.mNum - B.mNum;\n        });\n        return _targetList;\n    }\n\n    private DeepCopyCards(_targetList : Array<CardStruct>)  :  Array<CardStruct>\n    {\n        let tempList = JSON.parse(JSON.stringify(_targetList));\n        return tempList;\n    }\n\n    public FindBiggestCards(_targetList : Array<CardStruct>, _findCount : number)  : Array<CardStruct>\n    {\n        if (_targetList.length < _findCount)\n        {\n            return null;\n        }\n        let copyList = this.DeepCopyCards(_targetList);\n        while (copyList.length > _findCount)\n        {\n            copyList.shift();\n        }\n        return copyList;\n    }\n\n    private FindSameNumCards(_targetList : Array<CardStruct>, _sameCount : number) : Array<Array<CardStruct>>\n    {\n        let copyList = this.DeepCopyCards(_targetList);\n        let result = new Array<Array<CardStruct>>();\n        for (let i = 2; i <= 14; i++)\n        {\n            let tempResult = this.FindTargetNumList(copyList , i);\n            if (tempResult.length == _sameCount)\n            {\n                result.push(tempResult);\n            }\n        }\n        return result;\n    }\n\n    private FindTargetNumList(_targetList : Array<CardStruct> , _targetNum : number) : Array<CardStruct>\n    {\n        let temp = new Array<CardStruct>();\n        for(let i = 0 ; i < _targetList.length ; i++)\n        {\n            if(_targetList[i].mNum == _targetNum)\n            {\n                temp.push(_targetList[i]);\n            }\n        }\n        return temp;\n    }\n\n    private FindTargetNumCard(_targetList : Array<CardStruct> , _targetNum : number) : CardStruct\n    {\n        for (let i = 0; i < _targetList.length; i++)\n        {\n            if (_targetList[i].mNum == _targetNum)\n            {\n                return new CardStruct(_targetList[i].mNum , _targetList[i].mType);\n            }\n        }\n        return null;\n    }\n\n\n    private IsSameCards(card0 : CardStruct , card1 : CardStruct) : boolean\n    {\n        if(card0.mNum == card1.mNum && card0.mType == card1.mType)\n        {\n            return true;\n        }\n\n        return false;\n\n    }\n\n    private RemoveCards(_targetList:Array<CardStruct> , _removeList:Array<CardStruct>) : Array<CardStruct>\n    {\n        let copyList = this.DeepCopyCards(_targetList);\n        let step = 0 ;\n        while(step < copyList.length)\n        {\n            let currentCard = copyList[step];\n            let found = false;\n            for(let i = 0 ; i < _removeList.length ; i++)\n            {\n                if(this.IsSameCards(currentCard , _removeList[i]))\n                {\n                    copyList.splice(step,1);\n                    found = true;\n                    break;\n                }\n            }\n            if(found == false)\n            {\n                step++;\n            }\n        }\n        return copyList;\n    }\n\n    private FindA2345(_targetList : Array<CardStruct>)  :  Array<CardStruct>\n    {\n        let result = new Array<CardStruct>();\n        let ace = this.FindTargetNumCard(_targetList, 14);\n        let card2 = this.FindTargetNumCard(_targetList, 6);\n        let card3 = this.FindTargetNumCard(_targetList, 7);\n        let card4 = this.FindTargetNumCard(_targetList, 8);\n        let card5 = this.FindTargetNumCard(_targetList, 9);\n        result.push(ace);\n        result.push(card2);\n        result.push(card3);\n        result.push(card4);\n        result.push(card5);\n        \n        for (let i = 0; i < result.length; i++)\n        {\n            if (result[i] == null)\n            {\n                return null;\n            }\n        }\n\n        return result;\n    }\n\n    private FindNormalStraight(_targetList : Array<CardStruct>) : Array<Array<CardStruct>>\n    {\n        let copyList = this.DeepCopyCards(_targetList);\n        let result = new Array<Array<CardStruct>>();\n        let step = 0;\n        let condition = 5;\n        while (step  < copyList.length)\n        {\n            let tempResult = new Array<CardStruct>();\n            tempResult.push(copyList[step]);\n            for (let i = step; i < copyList.length; i++)\n            {\n                let currentStepCard = copyList[i];\n                let lastStepCard = tempResult[tempResult.length - 1];\n                if (currentStepCard.mNum == lastStepCard.mNum)\n                {\n                    continue;   \n                }\n                else \n                {\n                    if (currentStepCard.mNum - lastStepCard.mNum == 1)\n                    {\n                        tempResult.push(currentStepCard);\n                        if (tempResult.length == 5)\n                        {\n                            break;\n                        }\n                    }\n                    else\n                    {\n                        break;\n                    }\n                }\n            }\n            if (tempResult.length == 5)\n            {\n                result.push(tempResult);\n            }\n            step++;\n        }\n\n        return result;\n    }\n\n    private FindSameTypeCards(_targetList : Array<CardStruct> , _type : CardType) : Array<CardStruct>\n    {\n        let copyList = this.DeepCopyCards(_targetList);\n        let result = new Array<CardStruct>();\n        for(let i = 0 ; i < copyList.length ; i++)\n        {\n            let current = copyList[i];\n            if(current.mType == _type)\n            {\n                result.push(current);\n            }\n        }\n\n        return result;\n    }\n}\n\n"]}