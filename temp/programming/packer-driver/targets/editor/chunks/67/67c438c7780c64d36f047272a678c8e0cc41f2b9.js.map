{"version":3,"sources":["file:///Users/yamiwang/cowboy/assets/scripts/ui/common/CircleTimer.ts"],"names":["_decorator","Sprite","Label","BaseUI","ccclass","property","CircleTimer","mTotalTime","mRestTime","mEndCallback","mStartTimer","InitParam","BindUI","RegDataNotify","LateInit","UnregDataNotify","CustmoerDestory","StartTime","_totalTime","_endCallback","update","deltaTime","console","log"],"mappings":";;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAA6BC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,K,OAAAA,K;;AACrCC,MAAAA,M,iBAAAA,M;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBL,U;;6BAGjBM,W,WADZF,OAAO,CAAC,aAAD,C,UAGHC,QAAQ,CAACJ,MAAD,C,UAERI,QAAQ,CAACH,KAAD,C,2BALb,MACaI,WADb;AAAA;AAAA,4BACwC;AAAA;AAAA;;AAAA;;AAAA;;AAAA,eAOpCC,UAPoC,GAOd,CAPc;AAAA,eAQpCC,SARoC,GAQf,CARe;AAAA,eASpCC,YAToC,GASV,IATU;AAAA,eAUpCC,WAVoC,GAUZ,KAVY;AAAA;;AAWpCC,QAAAA,SAAS,GACT,CAEC;;AACDC,QAAAA,MAAM,GACN,CACC;;AACDC,QAAAA,aAAa,GACb,CACC;;AACDC,QAAAA,QAAQ,GACR,CAEC;;AACDC,QAAAA,eAAe,GACf,CAEC;;AACDC,QAAAA,eAAe,GACf,CAEC;;AAEMC,QAAAA,SAAS,CAACC,UAAD,EAAuBC,YAAvB,EAChB;AACI,eAAKZ,UAAL,GAAkBW,UAAlB;AACA,eAAKV,SAAL,GAAiBU,UAAjB;AACA,eAAKT,YAAL,GAAoBU,YAApB;AACA,eAAKT,WAAL,GAAmB,IAAnB;AACH;;AAEDU,QAAAA,MAAM,CAACC,SAAD,EACN;AACIC,UAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBF,SAA5B;;AACA,cAAG,KAAKX,WAAL,IAAoB,KAAvB,EACA;AACI;AACH;AAGJ;;AAnDmC,O;;;;;iBAGjB,I;;;;;;;iBAEJ,I","sourcesContent":["import { _decorator, Component, Node, Sprite, Label } from 'cc';\nimport { BaseUI } from '../../base/BaseUI';\nconst { ccclass, property } = _decorator;\n\n@ccclass('CircleTimer')\nexport class CircleTimer extends BaseUI {\n\n    @property(Sprite) \n    Progress: Sprite = null;\n    @property(Label) \n    Count: Label = null;\n\n    mTotalTime : number = 0;\n    mRestTime : number = 0;\n    mEndCallback : Function = null;\n    mStartTimer : boolean = false;\n    InitParam() \n    {\n        \n    }\n    BindUI() \n    {\n    }\n    RegDataNotify() \n    {\n    }\n    LateInit() \n    {\n\n    }\n    UnregDataNotify() \n    {\n\n    }\n    CustmoerDestory() \n    {\n\n    }\n\n    public StartTime(_totalTime : number , _endCallback :Function)\n    {\n        this.mTotalTime = _totalTime;\n        this.mRestTime = _totalTime;\n        this.mEndCallback = _endCallback;\n        this.mStartTimer = true;\n    }\n\n    update(deltaTime: number) \n    {\n        console.log(\"deltaTime==\" + deltaTime);\n        if(this.mStartTimer == false)\n        {\n            return;\n        }\n\n\n    }\n\n}\n\n"]}