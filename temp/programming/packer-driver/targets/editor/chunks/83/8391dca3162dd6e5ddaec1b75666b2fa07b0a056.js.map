{"version":3,"sources":["file:///Users/yamiwang/cowboy/assets/scripts/base/Calculator.ts"],"names":["CardStruct","Calculator","constructor","_num","_type","mType","mNum","CardType","Combiantion","GetInstance","instance","TryToCalculate","_publicCards","_playerCards","tempPublicCards","DeepCopyCards","tempPlayerCards","totalCardList","concat","SortCardList","LogCards","_targetCards","console","log","i","length","typeStr","Club","Diamond","Speades","Heart","_targetList","sort","A","B","tempList","JSON","parse","stringify"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node } from 'cc';\n\n\n\n\nexport class CardStruct\n{\n    constructor(_num : number , _type : CardType)\n    {\n        this.mNum = _num;\n        this.mType = _type;\n    }\n    public mType : CardType;\n    public mNum : number;\n}\n\nexport enum CardType\n{\n    None,\n    Diamond,\n    Club,\n    Heart,\n    Speades\n}\n\nexport enum Combiantion\n{\n    None,\n    High,\n    OnePair,\n    TwoPair,\n    ThreeOfKind,\n    Straight,\n    Flush,\n    FullHouse,\n    FourOfKind,\n    StraightFlush,\n    RoyalStraightFlush,\n}\n\nexport class Calculator{\n    private static instance : Calculator = null;\n    public static GetInstance() :Calculator\n    {\n        if(Calculator.instance == null)\n        {\n            Calculator.instance = new Calculator();\n        }\n        return Calculator.instance;\n    }\n\n\n    public TryToCalculate( _publicCards:Array<CardStruct> , _playerCards:Array<CardStruct> ) : Array<CardStruct>\n    {\n        let tempPublicCards = this.DeepCopyCards(_publicCards);\n        let tempPlayerCards = this.DeepCopyCards(_playerCards);\n        let totalCardList = tempPublicCards.concat(tempPlayerCards);\n        totalCardList = this.SortCardList(totalCardList);\n        this.LogCards(totalCardList);\n\n        //List<CardStruct> targetList = CreateCardList(tempCards);\n        //List<CardStruct> result = CalculateCombination(targetList);\n        // return result;\n    }\n\n\n    public LogCards(_targetCards : Array<CardStruct>)\n    {\n        console.log(\"当前牌组====\");\n        for(let i = 0 ; i < _targetCards.length ; i++)\n        {\n            let typeStr = \"\";\n            switch(_targetCards[i].mType)\n            {\n                case CardType.Club:\n                    typeStr = \"♣️\";\n                break;\n                case CardType.Diamond:\n                    typeStr = \"♦️\";\n                break;\n                case CardType.Speades:\n                    typeStr = \"♠️\";\n                break;\n                case CardType.Heart:\n                    typeStr = \"♥️\";\n                break;\n            }\n            console.log(\"==== \"+ _targetCards[i].mNum + typeStr);\n        }\n    }\n\n    private SortCardList(_targetList : Array<CardStruct>)  :  Array<CardStruct>\n    {\n        _targetList.sort(function (A, B) {\n            return A.mNum - B.mNum;\n        });\n        return _targetList;\n    }\n\n    private DeepCopyCards(_targetList : Array<CardStruct>)  :  Array<CardStruct>\n    {\n        let tempList = JSON.parse(JSON.stringify(_targetList));\n        return tempList;\n    }\n\n}\n\n"]}